#ifndef _BTREE_H_
#define _BTREE_H_

#define offsetof(type,memeber) ((size_t)&((type *)0)->member)

#define container_of(ptr,type,member) ({				\
	const typeof(((type *)0)->member) *_mptr=(ptr);		\
	(type*) ((char *) _mptr-offsetof(type,member));		\
})


#define btree_entry(ptr,type,member) \
		container_of(ptr,type,member)


typedef struct btree{
	struct  btree *lchild,*rchild;
} btree;

typedef struct my_btree{
	char data;
	struct btree_root btree; 
}my_btree;

//初始化btree root
void init_btree(btree *root);

//先序创建二叉树
btree *createBTree(btree *root);

//清空二叉树
void clearBTree(btree *root);

//先序遍历二叉树
void preOrder(btree root);

//中序遍历二叉树
void midOrder(btree root);

//后序遍历二叉树
void postOrder(btree root);

//输出叶子节点
void displayLeaf(btree root);

//左节点插入
void insertLeftNode(btree root,char ch);

//右节点插入
void insertRightNode(btree root,char ch);

//删除左子树
void deleteLeftTree(btree root);

//删除右子树
void deleteRightTree(btree root);
